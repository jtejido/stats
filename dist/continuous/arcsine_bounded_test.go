package continuous

import (
	"fmt"
	"math"
	"strconv"
	"testing"
)

// Generated with R darcsine(x, a, b) from package VaRES
func TestArcsineBoundedProbability(t *testing.T) {
	tol := 0.00001
	min := -1.
	max := 1.
	x := -.9
	inc := .01
	expected := []float64{0.730253, 0.698108, 0.670163, 0.645591, 0.623777, 0.604253, 0.586653, 0.57069, 0.556132, 0.542793, 0.530516, 0.519175, 0.508661, 0.498884, 0.489765, 0.481239, 0.473248, 0.465742, 0.458677, 0.452015, 0.445723, 0.43977, 0.434131, 0.42878, 0.423698, 0.418865, 0.414264, 0.409879, 0.405696, 0.401703, 0.397887, 0.394239, 0.390748, 0.387406, 0.384204, 0.381134, 0.378191, 0.375366, 0.372656, 0.370053, 0.367553, 0.365151, 0.362842, 0.360623, 0.35849, 0.356439, 0.354466, 0.352569, 0.350745, 0.348991, 0.347305, 0.345683, 0.344124, 0.342625, 0.341186, 0.339802, 0.338474, 0.337199, 0.335976, 0.334803, 0.333679, 0.332603, 0.331573, 0.330588, 0.329647, 0.328749, 0.327893, 0.327079, 0.326304, 0.32557, 0.324874, 0.324216, 0.323595, 0.323012, 0.322464, 0.321952, 0.321476, 0.321034, 0.320627, 0.320253, 0.319913, 0.319607, 0.319333, 0.319093, 0.318884, 0.318709, 0.318565, 0.318453, 0.318374, 0.318326, 0.31831, 0.318326, 0.318374, 0.318453, 0.318565, 0.318709, 0.318884, 0.319093, 0.319333, 0.319607, 0.319913, 0.320253, 0.320627, 0.321034, 0.321476, 0.321952, 0.322464, 0.323012, 0.323595, 0.324216, 0.324874, 0.32557, 0.326304, 0.327079, 0.327893, 0.328749, 0.329647, 0.330588, 0.331573, 0.332603, 0.333679, 0.334803, 0.335976, 0.337199, 0.338474, 0.339802, 0.341186, 0.342625, 0.344124, 0.345683, 0.347305, 0.348991, 0.350745, 0.352569, 0.354466, 0.356439, 0.35849, 0.360623, 0.362842, 0.365151, 0.367553, 0.370053, 0.372656, 0.375366, 0.378191, 0.381134, 0.384204, 0.387406, 0.390748, 0.394239, 0.397887, 0.401703, 0.405696, 0.409879, 0.414264, 0.418865, 0.423698, 0.42878, 0.434131, 0.43977, 0.445723, 0.452015, 0.458677, 0.465742, 0.473248, 0.481239, 0.489765, 0.498884, 0.508661, 0.519175, 0.530516, 0.542793, 0.556132, 0.57069, 0.586653, 0.604253, 0.623777, 0.645591, 0.670163, 0.698108, 0.730253}

	b := ArcsineBounded{min: min, max: max}

	for i, exp := range expected {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			res := b.Probability(x)
			run_test(t, res, exp, tol, fmt.Sprintf("ArcsineBounded(%v, %v) - PDF at x = %v", min, max, x))
		})

		x += inc
	}
}

// Generated with R parcsine(x, a, b) from package VaRES
func TestArcsineBoundedDistribution(t *testing.T) {
	tol := 0.00001
	min := -1.
	max := 1.
	x := -.9
	inc := .01
	expected := []float64{0.143566, 0.150704, 0.157542, 0.164119, 0.170463, 0.176602, 0.182555, 0.18834, 0.193973, 0.199467, 0.204833, 0.21008, 0.215219, 0.220256, 0.225199, 0.230053, 0.234825, 0.23952, 0.244142, 0.248695, 0.253183, 0.257611, 0.26198, 0.266294, 0.270556, 0.274769, 0.278934, 0.283055, 0.287133, 0.291169, 0.295167, 0.299128, 0.303053, 0.306943, 0.310801, 0.314628, 0.318424, 0.322192, 0.325932, 0.329645, 0.333333, 0.336997, 0.340637, 0.344254, 0.347849, 0.351424, 0.354978, 0.358514, 0.36203, 0.365529, 0.36901, 0.372475, 0.375924, 0.379358, 0.382777, 0.386182, 0.389573, 0.392951, 0.396317, 0.399671, 0.403013, 0.406345, 0.409666, 0.412976, 0.416277, 0.419569, 0.422853, 0.426127, 0.429394, 0.432654, 0.435906, 0.439151, 0.44239, 0.445623, 0.448851, 0.452073, 0.45529, 0.458502, 0.461711, 0.464915, 0.468116, 0.471313, 0.474508, 0.4777, 0.48089, 0.484078, 0.487264, 0.490449, 0.493633, 0.496817, 0.5, 0.503183, 0.506367, 0.509551, 0.512736, 0.515922, 0.51911, 0.5223, 0.525492, 0.528687, 0.531884, 0.535085, 0.538289, 0.541498, 0.54471, 0.547927, 0.551149, 0.554377, 0.55761, 0.560849, 0.564094, 0.567346, 0.570606, 0.573873, 0.577147, 0.580431, 0.583723, 0.587024, 0.590334, 0.593655, 0.596987, 0.600329, 0.603683, 0.607049, 0.610427, 0.613818, 0.617223, 0.620642, 0.624076, 0.627525, 0.63099, 0.634471, 0.63797, 0.641486, 0.645022, 0.648576, 0.652151, 0.655746, 0.659363, 0.663003, 0.666667, 0.670355, 0.674068, 0.677808, 0.681576, 0.685372, 0.689199, 0.693057, 0.696947, 0.700872, 0.704833, 0.708831, 0.712867, 0.716945, 0.721066, 0.725231, 0.729444, 0.733706, 0.73802, 0.742389, 0.746817, 0.751305, 0.755858, 0.76048, 0.765175, 0.769947, 0.774801, 0.779744, 0.784781, 0.78992, 0.795167, 0.800533, 0.806027, 0.81166, 0.817445, 0.823398, 0.829537, 0.835881, 0.842458, 0.849296, 0.856434}

	b := ArcsineBounded{min: min, max: max}

	for i, exp := range expected {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			res := b.Distribution(x)
			run_test(t, res, exp, tol, fmt.Sprintf("ArcsineBounded(%v, %v) - CDF at x = %v", min, max, x))
		})

		x += inc
	}
}

func TestArcsineBoundedVariance(t *testing.T) {
	tol := 0.0000001
	cases := []struct {
		a, b     float64
		expected float64
	}{
		{0, 1, .125},
		{0, 2, 0.5},
		{0, 20, 50},
		{0, 10, 12.5},
	}

	for i, c := range cases {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			b := ArcsineBounded{min: c.a, max: c.b}

			res := b.Variance()
			if math.Abs(res-c.expected) > tol {
				t.Errorf("Mismatch. Case %d, want: %v, got: %v", i, c.expected, res)
			}

		})
	}
}

func TestArcsineBoundedMean(t *testing.T) {
	tol := 0.0000001
	cases := []struct {
		a, b     float64
		expected float64
	}{
		{0, 1, .5},
		{0, 2, 1},
		{0, 20, 10},
		{0, 10, 5},
	}

	for i, c := range cases {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			b := ArcsineBounded{min: c.a, max: c.b}

			res := b.Mean()
			if math.Abs(res-c.expected) > tol {
				t.Errorf("Mismatch. Case %d, want: %v, got: %v", i, c.expected, res)
			}

		})
	}
}

func TestArcsineBoundedMode(t *testing.T) {
	tol := 0.0000001
	cases := []struct {
		a, b     float64
		expected float64
	}{
		{0, 1, .5},
		{0, 2, 1},
		{0, 20, 10},
		{0, 10, 5},
	}

	for i, c := range cases {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			b := ArcsineBounded{min: c.a, max: c.b}

			res := b.Mode()
			if math.Abs(res-c.expected) > tol {
				t.Errorf("Mismatch. Case %d, want: %v, got: %v", i, c.expected, res)
			}

		})
	}
}
